- name: get username of core user
  shell: 'grep "^sudo" /etc/group | cut -d: -f4 | cut -d, -f1'
  register: core_username

- name: install google drive ppa
  apt_repository:  repo="ppa:alessandro-strada/ppa"
- name: install pkgs necessary for my system
  apt: pkg={{ item }}
  with_items:
    - virt-manager
    - python-spice-client-gtk
    - google-drive-ocamlfuse
    - gnome-search-tool
    - htop
    - tree
    - libpython-dev
    - libyaml-dev
    - ubuntuone-control-panel-qt
    - virtualbox
    - ufw
    - wireshark
    - vlc
    - gitg
    - skype
    - iotop
    - dialog
    - rcconf
    - transmission
    - build-essential
    - libgcrypt11-dev
    - python-software-properties
    - ack-grep
    - exuberant-ctags
    - tomboy
    - pidgin
    - git-core
    - postgresql
    - revelation
    - dia
    - gip
    - inkscape
    - gimp
    - openssh-server
    - curl
    - vim
    - zsh
    - libjpeg-dev
    - libgif-dev
    - libcairo2-dev
    # Required for ADB Chrome Extension
    #- libncurses5:i386
- name: update grub to fix backlight issues
  lineinfile:
    dest=/etc/default/grub
    backup=yes
    regexp="GRUB_CMDLINE_LINUX_DEFAULT"
    line='GRUB_CMDLINE_LINUX_DEFAULT="quiet splash acpi_backlight=vendor thinkpad-acpi.brightness_enable=1"'
  notify: reconfigure grub
- name: enable ufw
  service: name=ufw  state=started
- name: set core user to use ZSH
  command: chsh -s /bin/zsh {{ core_username.stdout }}
- name: make /tmp use RAMdisk instead of hard disk
  lineinfile: dest=/etc/fstab backup=yes regexp="^tmpfs /tmp" line="tmpfs /tmp tmpfs defaults 0 0"
- name: make aptitude cache dir use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="archives\s+tmpfs" line="tmpfs /var/cache/apt/archives tmpfs defaults 0 0"
- name: make user download dir use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="Downloads\s+tmpfs" line="tmpfs /home/Downloads tmpfs defaults 0 0"

- name: make /var/tmp use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="^tmpfs /var/tmp" line="tmpfs /var/tmp tmpfs defaults 0 0"
- name: add vim to the update-alternatives editor list
  command: update-alternatives --install "/usr/bin/editor" "editor" "/usr/bin/vim" 5
- name: set vim to the default editor
  command: update-alternatives --set "editor" "/usr/bin/vim"

- name: move tmp directory to RAM disk
  mount: name=/tmp src=tmpfs fstype=tmpfs state=mounted

- name: create download directory if it doesn't exist
  file: dest=/home/Downloads state=directory mode=0750 owner={{ core_username.stdout }}

- name: delete core user downloads dir
  file: dest=/home/{{ core_username.stdout}}/Downloads state=absent

- name: symlink core user download dir to /home/downloads
  file: src=/home/Downloads dest=/home/{{core_username.stdout }}/Downloads  owner={{core_username.stdout }} state=link

- name: move home directory download folder to RAM disk
  mount: name=/home/Downloads src=tmpfs fstype=tmpfs state=mounted

- name: disable bluetooth by default
  copy: src=files/bluetooth.conf dest=/etc/init/bluetooth.conf

- name: add my user to virtualbox user group
  user: name={{ core_username.stdout}} append=yes groups="vboxusers"

- name: add my user to fuse user group
  user: name={{ core_username.stdout}} append=yes groups="fuse"

- name: add my server to my hosts file
  lineinfile: dest=/etc/hosts regexp=^173.230.140.57 line="173.230.140.57    csf" backup=yes

- name: check if chromedriver exists
  stat: path=/usr/local/bin/chromedriver
  register: st

- name: copy chromedriver for rails development
  get_url: url=http://chromedriver.storage.googleapis.com/2.5/chromedriver_linux64.zip dest=/tmp/chrome.zip
  when: st.stat.exists == false

- name: install chromedriver in usr local dir
  command: unzip -qq -o /tmp/chrome.zip chdir=/usr/local/bin creates=/usr/local/bin/chromedriver
  when: st.stat.exists == false

- name: set correct file permissions for chromedriver
  file: path=/usr/local/bin/chromedriver mode=0755

- name: enable middle click
  shell: "sudo -u {{ core_username.stdout }} dbus-launch gsettings set org.gnome.settings-daemon.peripherals.mouse middle-button-enabled true"

- name: create custom setup for logitech marble ball
  copy: src=files/marble_mouse.conf  dest=/usr/share/X11/xorg.conf.d/50-marblemouse.conf

- name: check if apt cache is using tmpfs
  shell: "/bin/mount | grep 'tmpfs.*apt.*archives' "
  register: apt_cache_tmpfs

- name: delete contents of apt cache archive
  file: dest=/var/cache/apt/archives state=absent
  when:  apt_cache_tmpfs.stdout == ''

- name: move apt cache file to RAM disk
  mount: name=/var/cache/apt/archives src=tmpfs fstype=tmpfs state=mounted
  when: apt_cache_tmpfs.stdout == ''

- name: check if RVM is installed
  stat: path=/etc/profile.d/rvm.sh
  register: rvm

- name: run apt-get update again. will speed up rvm install
  apt: update_cache=yes
  when: rvm.stat.exists == False

- name: install RVM
  shell: "curl -sSL https://get.rvm.io | bash -s stable --ruby"
  when: st.stat.exists == False

- name: assign core user to the rvm group
  user: name={{ core_username.stdout }} append=yes groups="rvm"

- name: check if librarian-chef gem exists
  shell: >
    executable=/bin/bash source /etc/profile.d/rvm.sh;
    gem list librarian-chef | grep librarian-chef
  register: librarianchef
  ignore_errors: true

- name: check if knife-solo gem exists
  shell: >
    executable=/bin/bash source /etc/profile.d/rvm.sh;
    gem list knife-solo | grep knife-solo
  register: knifesolo
  ignore_errors: true


- name: install knife-solo gem
  shell: >
    executable=/bin/bash source /etc/profile.d/rvm.sh;
    gem install --no-ri --no-rdoc knife-solo
  when: knifesolo.stdout == ''

- name: install librarian-chef gem
  shell: >
    executable=/bin/bash source /etc/profile.d/rvm.sh;
    gem install --no-ri --no-rdoc librarian-chef
  when: librarianchef.stdout == ''


