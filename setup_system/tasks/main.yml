#:set ft=ansible

- name: install virtualization related apps
  apt: pkg={{ item }} update_cache=yes
  with_items:
    - qemu-kvm
    - libvirt-bin
    - wireshark
    - libguestfs-tools
    - python-setuptools

- name: install general tools
  apt: pkg={{ item }}
  with_items:
    - iotop
    - build-essential
    - git-buildpackage
    - python-software-properties
    - software-properties-common
    - tree
    - htop
    - zsh
    - ruby-dev
    - libvirt-dev
    - unzip
    - libxml2-dev
    - zlib1g-dev
    - gitg
    - curl
    - revelation
    - gparted

- name: install desktop related tools
  apt: pkg={{ item }}
  with_items:
    - gimp
    - inkscape
    - gip
    - revelation
    - zsh
    - vim-nox
    - blueman
    - pencil
    - transmission
    - virt-manager
    - virt-viewer
    - pidgin
    - vim-gnome
  tags: desktop

- name: install pip using easy_install
  command: easy_install pip creates=/usr/local/bin/pip

- name: install netshow
  pip: name=netshow-linux-lib

- name: set zsh as the default shell for users in the user_list var
  user: name={{ item }} shell=/bin/zsh
  items: user_list

- block:
    - name: check if Atom deb is installed
      apt: name=atom state=present
  rescue:
    - name: download latest version of Atom
      get_url: url=https://atom.io/download/deb dest=/tmp
      register: url_result
    - name: install Atom deb
      apt: deb="{{ url_result.dest }}"

- block:
    - name: check if Vagrant deb is installed
      shell: dpkg -l  | grep vagrant
  rescue:
    - name: download latest vagrant
      get_url:
        url: "https://releases.hashicorp.com/vagrant/{{ vagrant_version}}/vagrant_{{ vagrant_version }}_x86_64.deb"
        dest: /tmp
      register: vagrant_download
    - name: install vagrant deb
      apt: deb="{{ vagrant_download.dest }}" state=present

- block:
    - name: check if packer is installed
      file: path="/opt/packer/packer" state=file
  rescue:
    - name: download packer file
      get_url:
        url: "https://releases.hashicorp.com/packer/{{ packer_version}}/packer_{{ packer_version }}_linux_amd64.zip"
        dest: /tmp
      register: packer_zip

    - name: create packer home directory
      file: path=/opt/packer state=directory mode=0755

    - name: unarchive packer file
      unarchive:
        src: "{{ packer_zip.dest }}"
        dest: "/opt/packer/"

- name: create a symlink for the packer executable
  file: src=/opt/packer/packer dest=/usr/local/bin/packer state=link

- block:
    - name: check if google chrome is installed
      apt: name=google-chrome-stable

  rescue:
    - name: add google chrome apt key
      apt_key:
        url: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
    - name: apt repo for google chrome
      apt_repository:
        repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
    - name: install chrome stable
      apt: name=google-chrome-stable update_cache=yes
  tags: desktop

- name: add blog site IP to /etc/hosts
  lineinfile: dest=/etc/hosts regexp='^173\.230\.140\.57' line='173.230.140.57 csf' owner=root group=root mode=0644

- name: make /tmp use RAMdisk instead of hard disk
  lineinfile: dest=/etc/fstab backup=yes regexp="^tmpfs /tmp" line="tmpfs /tmp tmpfs defaults 0 0"

- name: make aptitude cache dir use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="archives\s+tmpfs" line="tmpfs /var/cache/apt/archives tmpfs defaults 0 0"

- name: create downloads directory. make it permission 777
  file: path=/home/Downloads state=directory mode=0777

- name: make user download dir use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="Downloads\s+tmpfs" line="tmpfs /home/Downloads tmpfs defaults 0 0"

- name: make /var/tmp use RAM instead of HDD
  lineinfile: dest=/etc/fstab backup=yes regexp="^tmpfs /var/tmp" line="tmpfs /var/tmp tmpfs defaults 0 0"

- block:
    - name: check if /var/tmp is mounted as tmpfs
      shell: df | grep "/var/tmp"
  rescue:
    - name: delete contents of /var/tmp
      command: rm -rf /var/tmp/*

    - name: mount /var/tmp directory as tmpfs
      command: mount /var/tmp

- block:
    - name: check if /tmp is mounted as tmpfs
      shell: df | grep "/tmp"
  rescue:
    - name: delete contents of /tmp
      command: rm -rf /tmp/*

    - name: mount /tmp directory as tmpfs
      command: mount /tmp

- block:
    - name: check if /var/cache/apt/archives is mounted as tmpfs
      shell: df | grep "archives"
  rescue:
    - name: delete contents of /var/cache/apt/archives
      command: rm -rf /var/cache/apt/archives/*

    - name: mount /var/cache/apt/archives directory as tmpfs
      command: mount /var/cache/apt/archives

- block:
    - name: check if /home/Downloads is mounted as tmpfs
      shell: df | grep "Downloads"
  rescue:
    - name: delete contents of /home/Downloads
      command: rm -rf /home/Downloads/*

    - name: mount /home/Downloads directory as tmpfs
      command: mount /home/Downloads



